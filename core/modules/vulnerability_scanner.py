import logging
import re
from concurrent.futures import ThreadPoolExecutor

class VulnerabilityScanner:
    def __init__(self, config):
        self.config = config
        self.logger = logging.getLogger(__name__)
        self.max_workers = config.get('max_workers', 5)
        
        # Load vulnerability definitions
        self.vuln_definitions = self._load_vuln_definitions()

    def _load_vuln_definitions(self):
        """Load vulnerability checking rules"""
        return {
            'ssh': {
                'old_version': r'SSH-2.0-OpenSSH_[1-6]',
                'weak_cipher': r'arcfour|rc4|des|3des',
            },
            'http': {
                'directory_listing': r'Index of /',
                'server_info': r'Server: .*?([\d.]+)',
                'php_info': r'<title>phpinfo\(\)</title>',
            },
            'ftp': {
                'anonymous_login': r'230.*Login successful',
                'old_version': r'220.*\b\d{1,2}\.\d{1,2}\.\d{1,2}\b',
            },
            'mysql': {
                'old_version': r'5\.[0-6]\.\d+',
            },
        }

    def check_vulnerabilities(self, service_info, os_info):
        """Check for vulnerabilities in a specific service"""
        vulnerabilities = []
        service_type = service_info['service']
        banner = service_info['banner']
        
        if service_type in self.vuln_definitions:
            rules = self.vuln_definitions[service_type]
            
            for vuln_name, pattern in rules.items():
                if re.search(pattern, banner, re.IGNORECASE):
                    vulnerabilities.append({
                        'port': service_info['port'],
                        'service': service_type,
                        'vulnerability': vuln_name,
                        'details': f"Detected in banner: {banner[:50]}..."
                    })
        
        # Check OS-specific vulnerabilities
        if os_info:
            self._check_os_vulnerabilities(os_info, vulnerabilities)
        
        return vulnerabilities

    def _check_os_vulnerabilities(self, os_info, vulnerabilities):
        """Check for OS-specific vulnerabilities"""
        os_name = os_info.get('os_name', '').lower()
        os_version = os_info.get('os_version', '')
        
        # Example OS vulnerability checks
        if 'windows' in os_name:
            if os_version and os_version.startswith(('5.', '6.0')):
                vulnerabilities.append({
                    'type': 'os',
                    'vulnerability': 'outdated_windows',
                    'details': f"Outdated Windows version: {os_version}"
                })
        elif 'linux' in os_name:
            if os_version and re.search(r'2\.6|3\.[0-9]', os_version):
                vulnerabilities.append({
                    'type': 'os',
                    'vulnerability': 'outdated_kernel',
                    'details': f"Outdated Linux kernel: {os_version}"
                })

    def scan(self, target, services, os_info):
        """Perform vulnerability scan on detected services"""
        self.logger.info(f"Starting vulnerability scan for {target}")
        vulnerabilities = []
        
        with ThreadPoolExecutor(max_workers=self.max_workers) as executor:
            future_to_service = {
                executor.submit(self.check_vulnerabilities, service, os_info): service 
                for service in services
            }
            
            for future in future_to_service:
                try:
                    results = future.result()
                    if results:
                        vulnerabilities.extend(results)
                except Exception as e:
                    self.logger.error(f"Vulnerability check failed: {str(e)}")
        
        return vulnerabilities